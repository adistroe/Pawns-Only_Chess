type: edu
files:
- name: src/chess/Main.kt
  visible: true
  text: |-
    package chess
    //  Can't do without it
    fun main() {
        Chess().run()
    }
  learner_created: false
- name: src/chess/Chess.kt
  visible: true
  text: |-
    package chess

    class Chess {
        //  player types this command to stop the game
        private enum class Command(val text: String) {
            EXIT("exit")
        }

        /**
         *  Check if input is in standard chess algebraic notation
         */
        private fun isValidNotation(input: String): Boolean {
            val regex = "(?:[a-h][1-8]){2}".toRegex()
            return regex.matches(input)
        }

        //  let's get ready to rumble !
        fun run() {
            println(Message.TITLE.text)
            println(Message.PLAYER_ONE.text)
            val playerOne = Player(readln(), Color.WHITE)
            println(Message.PLAYER_TWO.text)
            val playerTwo = Player(readln(), Color.BLACK)
            val board = Board()
            //  white player (Player One) moves first
            var isPlayerOnesTurn = true
            //  main game loop
            do {
                //  who's turn is it
                val player = if (isPlayerOnesTurn) playerOne else playerTwo
                println(String.format(Message.PLAYERS_TURN.text, player.name))
                val input = readln().lowercase()
                //  player stops game
                if (input == Command.EXIT.text) continue
                //  input not in standard chess algebraic notation
                if (!isValidNotation(input)) {
                    println(Message.INVALID_INPUT.text)
                    continue
                }
                //  convert the chess notation into source and destination coordinate Pairs
                val oldPosition = Pair(input[0], input[1].digitToInt())
                val newPosition = Pair(input[2], input[3].digitToInt())
                //  we can move the pawn
                if (board.isValidMove(oldPosition, newPosition, player)) {
                    //  switch player's turn
                    isPlayerOnesTurn = !isPlayerOnesTurn
                }
            } while (input != Command.EXIT.text)
            //  Thanks for playing !
            println(Message.BYE.text)
        }
    }
  learner_created: false
- name: src/chess/Pawn.kt
  visible: true
  text: |-
    package chess
    //  the foot-soldier of chess
    data class Pawn(val color: Color, var position: Pair<Char, Int>, var canMoveTwoRanks: Boolean = true) {
    }
  learner_created: false
- name: src/chess/Board.kt
  visible: true
  text: |-
    package chess

    class Board {
        //  standard chess algebraic notation
        private val ranks = (8 downTo 1)
        private val files = ('a'..'h')

        //  white pawns start on rank 2
        private val whitePawns = List(8) { index -> Pawn(Color.WHITE, Pair(files.elementAt(index), 2)) }

        //  black pawns start on rank 7
        private val blackPawns = List(8) { index -> Pawn(Color.BLACK, Pair(files.elementAt(index), 7)) }

        //  all pawns on the board
        private val pawns = whitePawns + blackPawns

        //  ASCII glyphs for drawing the chess board
        private enum class Draw(val element: String) {
            HORIZONTAL("  +---+---+---+---+---+---+---+---+\n"),
            VERTICAL("|"),
            PADDING(" ")
        }

        /**
         *  Checks if there is a pawn on the square and returns 'B' or 'W' depending on pawn color.
         *  If no pawn is found on the square, it returns 'padding'
         */
        private fun getPawnGlyphAt(position: Pair<Char, Int>): Char {
            return try {
                pawns.first { pawn -> pawn.position == position }.color.value.first()
            } catch (e: NoSuchElementException) {
                Draw.PADDING.element.first()
            }
        }

        /**
         *  Checks if there is a pawn on the square and returns it.
         *  If no pawn is found on the square, it returns 'null'
         */
        private fun getPawnAt(position: Pair<Char, Int>): Pawn? {
            return try {
                pawns.first { pawn -> pawn.position == position }
            } catch (e: NoSuchElementException) {
                null
            }
        }

        /**
         *  Check if pawn is at the specified position and is of correct color
         */
        private fun isValidPawnAt(position: Pair<Char, Int>, player: Player): Boolean {
            val pawn = getPawnAt(position)
            return pawn != null && pawn.color == player.color
        }

        /**
         *  Checks if the pawn can be moved from 'oldPosition' to 'newPosition'
         *  - pawn exists at 'oldPosition' and is of correct color
         *  - pawn moves on the same file
         *  - pawn moves forward and no more than 1 rank or 2 ranks (only once)
         *  - there is no other pawn at 'newPosition'
         */
        fun isValidMove(oldPosition: Pair<Char, Int>, newPosition: Pair<Char, Int>, player: Player): Boolean {
            //  no pawn found, or pawn is of wrong color
            if (!isValidPawnAt(oldPosition, player)) {
                val position = "${oldPosition.first}${oldPosition.second}"
                println(String.format(Message.NO_PAWN.text, player.color.value.lowercase(), position))
                return false
            }
            val thisPawn = getPawnAt(oldPosition)
            if (thisPawn != null) {
                //  move is not on the same file
                if (thisPawn.position.first != newPosition.first) {
                    println(Message.INVALID_INPUT.text)
                    return false
                }
                //  the pawn can move 1 rank or 2 ranks (only once)
                val allowedRanks = if (thisPawn.canMoveTwoRanks) 2 else 1
                //  pawn doesn't move forward, or moves more than allowed number of ranks
                when (thisPawn.color) {
                    //  white moves from 2 -> 8
                    Color.WHITE -> {
                        val validRange = thisPawn.position.second + 1..thisPawn.position.second + allowedRanks
                        if (newPosition.second !in validRange) {
                            println(Message.INVALID_INPUT.text)
                            return false
                        }
                    }
                    //  black moves from 7 -> 1
                    Color.BLACK -> {
                        val validRange = thisPawn.position.second - 1 downTo thisPawn.position.second - allowedRanks
                        if (newPosition.second !in validRange) {
                            println(Message.INVALID_INPUT.text)
                            return false
                        }
                    }
                }
                //  destination is already occupied by an existing pawn
                if (pawns.find { pawn -> pawn.position == newPosition } != null) {
                    println(Message.INVALID_INPUT.text)
                    return false
                }
            }
            //  update the board
            update(oldPosition, newPosition)
            return true
        }

        /**
         *  Update pawn's position after player's move
         */
        private fun update(oldPosition: Pair<Char, Int>, newPosition: Pair<Char, Int>) {
            val pawn = getPawnAt(oldPosition)
            if (pawn != null) {
                pawn.position = newPosition
                pawn.canMoveTwoRanks = false
            }
            // redraw the board after moving the pawn
            draw()
        }

        /**
         *  Draws the game board and the pawns
         */
        private fun draw() {
            val padding = Draw.PADDING.element
            val horizontal = Draw.HORIZONTAL.element
            val vertical = Draw.VERTICAL.element
            //  each 'rank'
            for (rank in ranks) {
                val row = StringBuilder()
                row.append(horizontal, rank, padding, vertical)
                for (file in files) {
                    //  each 'square' in the rank
                    val square = StringBuilder()
                    square.append(padding, getPawnGlyphAt(Pair(file, rank)), padding, vertical)
                    row.append(square)
                }
                println(row)
            }
            //  'files'
            val bottomFiles = StringBuilder()
            bottomFiles.append(horizontal, padding)
            files.forEach { file -> bottomFiles.append(padding.repeat(3), file) }
            println("$bottomFiles\n")
        }

        init {
            //  drawing the starting board
            draw()
        }
    }
  learner_created: false
- name: src/chess/Player.kt
  visible: true
  text: |-
    package chess
    //  white player moves first
    data class Player(val name: String, val color: Color) {
    }
  learner_created: false
- name: src/chess/Color.kt
  visible: true
  text: |-
    package chess
    //  standard chess colors
    enum class Color(val value: String) {
        BLACK("Black"),
        WHITE("White")
    }
  learner_created: false
- name: src/chess/Message.kt
  visible: true
  text: |-
    package chess
    //  string messages
    enum class Message(val text: String) {
        TITLE("Pawns-Only Chess"),
        PLAYER_ONE("First Player's name:"),
        PLAYER_TWO("Second Player's name:"),
        PLAYERS_TURN("%s's turn:"),
        INVALID_INPUT("Invalid Input"),
        NO_PAWN("No %s pawn at %s"),
        BYE("Bye!")
    }
  learner_created: false
- name: test/PawnsOnlyChessTest.kt
  visible: false
  text: |+
    import org.hyperskill.hstest.dynamic.DynamicTest
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testing.TestedProgram

    class PawnsOnlyChessTest : StageTest<Any>() {
    // Tests added 11-Nov-21, Start
        @DynamicTest
        fun directCapture1(): CheckResult {
            for (ch in 'a'..'g') {
                val pawnsWhite = MutableList<Pair<Int, Int>>(8) { index -> Pair(1, index) }
                val pawnsBlack = MutableList<Pair<Int, Int>>(8) { index -> Pair(6, index) }

                val main = TestedProgram()
                var outputString = main.start().trim()

                var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
                if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
                position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
                if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")

                outputString = main.execute("John").trim()
                position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
                if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")

                outputString = main.execute("Amelia").trim()
                position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
                position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
                if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")


                outputString = main.execute("${ch}2${ch}4").trim()
                pawnsWhite.remove(Pair(1, ch - 'h' + 7))
                pawnsWhite.add(Pair(3, ch - 'h' + 7))
                position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                if (position == -1) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
                position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
                if (position == -1) return CheckResult(false, "Player 2 prompt to play is expected.")

                outputString = main.execute("${ch + 1}7${ch + 1}5").trim()
                pawnsBlack.remove(Pair(6, ch - 'h' + 8))
                pawnsBlack.add(Pair(4, ch - 'h' + 8))
                position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                if (position == -1) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
                position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
                if (position == -1) return CheckResult(false, "Player 1 prompt to play is expected.")

                outputString = main.execute("${ch}4${ch + 1}5").trim()
                pawnsWhite.remove(Pair(3, ch - 'h' + 7))
                pawnsBlack.remove(Pair(4, ch - 'h' + 8))
                pawnsWhite.add(Pair(4, ch - 'h' + 8))
                position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                if (position == -1) return CheckResult(false, "Wrong chessboard printout after capturing.")
                position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
                if (position == -1) return CheckResult(false, "Player 2 prompt to play is expected.")

                outputString = main.execute("exit").trim()
                position = checkOutput(outputString.toLowerCase(), 0, "bye")
                if ( position  == -1 ) return CheckResult(false, "Exit message is expected.")

                if (!main.isFinished) return CheckResult(false, "The application didn't exit.")
            }

            return CheckResult.correct()
        }

        @DynamicTest
        fun directCapture2(): CheckResult {
            for (ch in 'b'..'h') {
                val pawnsWhite = MutableList<Pair<Int, Int>>(8) { index -> Pair(1, index) }
                val pawnsBlack = MutableList<Pair<Int, Int>>(8) { index -> Pair(6, index) }

                val main = TestedProgram()
                var outputString = main.start().trim()

                var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
                if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
                position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
                if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")

                outputString = main.execute("John").trim()
                position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
                if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")

                outputString = main.execute("Amelia").trim()
                position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
                position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
                if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")


                outputString = main.execute("${ch}2${ch}4").trim()
                pawnsWhite.remove(Pair(1, ch - 'h' + 7))
                pawnsWhite.add(Pair(3, ch - 'h' + 7))
                position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                if (position == -1) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
                position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
                if (position == -1) return CheckResult(false, "Player 2 prompt to play is expected.")

                outputString = main.execute("${ch - 1}7${ch - 1}5").trim()
                pawnsBlack.remove(Pair(6, ch - 'h' + 6))
                pawnsBlack.add(Pair(4, ch - 'h' + 6))
                position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                if (position == -1) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
                position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
                if (position == -1) return CheckResult(false, "Player 1 prompt to play is expected.")

                outputString = main.execute("${ch}4${ch - 1}5").trim()
                pawnsWhite.remove(Pair(3, ch - 'h' + 7))
                pawnsBlack.remove(Pair(4, ch - 'h' + 6))
                pawnsWhite.add(Pair(4, ch - 'h' + 6))
                position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                if (position == -1) return CheckResult(false, "Wrong chessboard printout capturing.")
                position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
                if (position == -1) return CheckResult(false, "Player 2 prompt to play is expected.")

                outputString = main.execute("exit").trim()
                position = checkOutput(outputString.toLowerCase(), 0, "bye")
                if ( position  == -1 ) return CheckResult(false, "Exit message is expected.")

                if (!main.isFinished) return CheckResult(false, "The application didn't exit.")
            }

            return CheckResult.correct()
        }

        @DynamicTest
        fun directCapture3(): CheckResult {
            for (ch in 'a'..'g') {
                val pawnsWhite = MutableList<Pair<Int, Int>>(8) { index -> Pair(1, index) }
                val pawnsBlack = MutableList<Pair<Int, Int>>(8) { index -> Pair(6, index) }

                val main = TestedProgram()
                var outputString = main.start().trim()

                var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
                if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
                position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
                if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")

                outputString = main.execute("John").trim()
                position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
                if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")

                outputString = main.execute("Amelia").trim()
                position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
                position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
                if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")


                outputString = main.execute("${ch}2${ch}3").trim()
                pawnsWhite.remove(Pair(1, ch - 'h' + 7))
                pawnsWhite.add(Pair(2, ch - 'h' + 7))
                position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                if (position == -1) return CheckResult(false, "Wrong chessboard printout after 1 square move.")
                position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
                if (position == -1) return CheckResult(false, "Player 2 prompt to play is expected.")

                outputString = main.execute("${ch + 1}7${ch + 1}5").trim()
                pawnsBlack.remove(Pair(6, ch - 'h' + 8))
                pawnsBlack.add(Pair(4, ch - 'h' + 8))
                position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                if (position == -1) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
                position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
                if (position == -1) return CheckResult(false, "Player 1 prompt to play is expected.")

                outputString = main.execute("${ch}3${ch}4").trim()
                pawnsWhite.remove(Pair(2, ch - 'h' + 7))
                pawnsWhite.add(Pair(3, ch - 'h' + 7))
                position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                if (position == -1) return CheckResult(false, "Wrong chessboard printout after a forward move.")
                position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
                if (position == -1) return CheckResult(false, "Player 2 prompt to play is expected.")

                outputString = main.execute("${ch + 1}5${ch}4").trim()
                pawnsBlack.remove(Pair(4, ch - 'h' + 8))
                pawnsWhite.remove(Pair(3, ch - 'h' + 7))
                pawnsBlack.add(Pair(3, ch - 'h' + 7))
                position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                if (position == -1) return CheckResult(false, "Wrong chessboard printout after capturing.")
                position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
                if (position == -1) return CheckResult(false, "Player 1 prompt to play is expected.")

                outputString = main.execute("exit").trim()
                position = checkOutput(outputString.toLowerCase(), 0, "bye")
                if ( position  == -1 ) return CheckResult(false, "Exit message is expected.")

                if (!main.isFinished) return CheckResult(false, "The application didn't exit.")
            }

            return CheckResult.correct()
        }

        @DynamicTest
        fun directCapture4(): CheckResult {
            for (ch in 'b'..'h') {
                val pawnsWhite = MutableList<Pair<Int, Int>>(8) { index -> Pair(1, index) }
                val pawnsBlack = MutableList<Pair<Int, Int>>(8) { index -> Pair(6, index) }

                val main = TestedProgram()
                var outputString = main.start().trim()

                var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
                if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
                position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
                if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")

                outputString = main.execute("John").trim()
                position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
                if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")

                outputString = main.execute("Amelia").trim()
                position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
                position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
                if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")


                outputString = main.execute("${ch}2${ch}3").trim()
                pawnsWhite.remove(Pair(1, ch - 'h' + 7))
                pawnsWhite.add(Pair(2, ch - 'h' + 7))
                position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                if (position == -1) return CheckResult(false, "Wrong chessboard printout after 1 square move.")
                position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
                if (position == -1) return CheckResult(false, "Player 2 prompt to play is expected.")

                outputString = main.execute("${ch - 1}7${ch - 1}5").trim()
                pawnsBlack.remove(Pair(6, ch - 'h' + 6))
                pawnsBlack.add(Pair(4, ch - 'h' + 6))
                position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                if (position == -1) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
                position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
                if (position == -1) return CheckResult(false, "Player 1 prompt to play is expected.")

                outputString = main.execute("${ch}3${ch}4").trim()
                pawnsWhite.remove(Pair(2, ch - 'h' + 7))
                pawnsWhite.add(Pair(3, ch - 'h' + 7))
                position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                if (position == -1) return CheckResult(false, "Wrong chessboard printout after a forward move.")
                position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
                if (position == -1) return CheckResult(false, "Player 2 prompt to play is expected.")

                outputString = main.execute("${ch - 1}5${ch}4").trim()
                pawnsBlack.remove(Pair(4, ch - 'h' + 6))
                pawnsWhite.remove(Pair(3, ch - 'h' + 7))
                pawnsBlack.add(Pair(3, ch - 'h' + 7))
                position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                if (position == -1) return CheckResult(false, "Wrong chessboard printout after capturing.")
                position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
                if (position == -1) return CheckResult(false, "Player 1 prompt to play is expected.")

                outputString = main.execute("exit").trim()
                position = checkOutput(outputString.toLowerCase(), 0, "bye")
                if ( position  == -1 ) return CheckResult(false, "Exit message is expected.")

                if (!main.isFinished) return CheckResult(false, "The application didn't exit.")
            }

            return CheckResult.correct()
        }
    // Tests added 11-Nov-21, End
        @DynamicTest
        fun testAdd4(): CheckResult {
            for (ch in listOf('a', 'c', 'e')) {
                val chList = ('a'..'h').filter {it - ch > 1 }
                for (ch2 in chList) {

                    val pawnsWhite = MutableList<Pair<Int, Int>>(8) { index -> Pair(1, index) }
                    val pawnsBlack = MutableList<Pair<Int, Int>>(8) { index -> Pair(6, index) }

                    val main = TestedProgram()
                    var outputString = main.start().trim()

                    var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
                    if (position == -1) return CheckResult(false, "Program title is expected.")
                    position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
                    if (position == -1) return CheckResult(false, "Player 1 name prompt is expected.")

                    outputString = main.execute("John").trim()
                    position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
                    if (position == -1) return CheckResult(false, "Player 2 name prompt is expected.")

                    outputString = main.execute("Amelia").trim()
                    position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                    if (position == -1) return CheckResult(false, "Wrong initial chessboard printout.")
                    position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
                    if (position == -1) return CheckResult(false, "Player 1 prompt to play is expected.")

                    outputString = main.execute("${ch}2${ch}4").trim()
                    pawnsWhite.remove(Pair(1, ch - 'h' + 7))
                    pawnsWhite.add(Pair(3, ch - 'h' + 7))
                    position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                    if (position == -1) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
                    position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
                    if (position == -1) return CheckResult(false, "Player 2 prompt to play is expected.")

                    outputString = main.execute("a7a6").trim()
                    pawnsBlack.remove(Pair(6, 0))
                    pawnsBlack.add(Pair(5, 0))
                    position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                    if (position == -1) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
                    position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
                    if (position == -1) return CheckResult(false, "Player 1 prompt to play is expected.")

                    outputString = main.execute("${ch}4${ch}5").trim()
                    pawnsWhite.remove(Pair(3, ch - 'h' + 7))
                    pawnsWhite.add(Pair(4, ch - 'h' + 7))
                    position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                    if (position == -1) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
                    position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
                    if (position == -1) return CheckResult(false, "Player 2 prompt to play is expected.")

                    outputString = main.execute("${ch2}7${ch2}5").trim()
                    pawnsBlack.remove(Pair(6, ch2 - 'h' + 7))
                    pawnsBlack.add(Pair(4, ch2 - 'h' + 7))
                    position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                    if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after 1 square move.")
                    position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
                    if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

                    outputString = main.execute("${ch}5${ch2}6").trim()
                    position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "john's turn:")
                    if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

                    outputString = main.execute("${ch}5${ch + 1}6").trim()
                    position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "john's turn:")
                    if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

                    outputString = main.execute("exit").trim()
                    position = checkOutput(outputString.toLowerCase(), 0, "bye")
                    if (position == -1) return CheckResult(false, "Exit message is expected.")
                }
            }

            return CheckResult.correct()
        }

        @DynamicTest
        fun testAdd3(): CheckResult {
            val pawnsWhite = MutableList<Pair<Int, Int>>(8) { index -> Pair(1, index) }
            val pawnsBlack = MutableList<Pair<Int, Int>>(8) { index -> Pair(6, index) }

            val main = TestedProgram()
            var outputString = main.start().trim()

            var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
            if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
            position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")

            outputString = main.execute("John").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")

            outputString = main.execute("Amelia").trim()
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            for (ch in 'a'..'h') {
                outputString = main.execute("${ch}2${ch}4").trim()
                pawnsWhite.remove(Pair(1, ch - 'h' + 7))
                pawnsWhite.add(Pair(3, ch - 'h' + 7))
                position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                if (position == -1) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
                position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
                if (position == -1) return CheckResult(false, "Player 2 prompt to play is expected.")

                outputString = main.execute("${ch}7${ch}5").trim()
                pawnsBlack.remove(Pair(6, ch - 'h' + 7))
                pawnsBlack.add(Pair(4, ch - 'h' + 7))
                position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                if (position == -1) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
                position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
                if (position == -1) return CheckResult(false, "Player 1 prompt to play is expected.")
            }

            for (ch in listOf('a', 'e', 'h')) {
                val chList = ('a'..'h').filter { kotlin.math.abs(it - ch) > 1 }
                for (ch2 in chList) {
                    outputString = main.execute("${ch}4${ch2}5").trim()
                    position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "john's turn:")
                    if (position == -1) return CheckResult(false, "Incorrect output after an invalid command.")
                }
            }

            outputString = main.execute("exit").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "bye")
            if ( position  == -1 ) return CheckResult(false, "Exit message is expected.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun testAdd2(): CheckResult {
            val pawnsWhite = MutableList<Pair<Int, Int>>(8) { index -> Pair(1, index) }
            val pawnsBlack = MutableList<Pair<Int, Int>>(8) { index -> Pair(6, index) }

            val main = TestedProgram()
            var outputString = main.start().trim()

            var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
            if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
            position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")

            outputString = main.execute("John").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")

            outputString = main.execute("Amelia").trim()
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("a2a4").trim()
            pawnsWhite.remove(Pair(1, 0))
            pawnsWhite.add(Pair(3, 0))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if (position == -1) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
            position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
            if (position == -1) return CheckResult(false, "Player 2 prompt to play is expected.")

            outputString = main.execute("a7a5").trim()
            pawnsBlack.remove(Pair(6, 0))
            pawnsBlack.add(Pair(4, 0))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if (position == -1) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if (position == -1) return CheckResult(false, "Player 1 prompt to play is expected.")

            for (ch in 'b'..'h') {
                outputString = main.execute("${ch - 1}4${ch - 1}5").trim()
                position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "john's turn:")
                if (position == -1) return CheckResult(false, "Incorrect output after an invalid command.")

                outputString = main.execute("${ch}2${ch}4").trim()
                pawnsWhite.remove(Pair(1, ch - 'h' + 7))
                pawnsWhite.add(Pair(3, ch - 'h' + 7))
                position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                if (position == -1) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
                position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
                if (position == -1) return CheckResult(false, "Player 2 prompt to play is expected.")

                outputString = main.execute("${ch - 1}5${ch - 1}4").trim()
                position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "amelia's turn:")
                if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

                outputString = main.execute("${ch}7${ch}5").trim()
                pawnsBlack.remove(Pair(6, ch - 'h' + 7))
                pawnsBlack.add(Pair(4, ch - 'h' + 7))
                position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                if (position == -1) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
                position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
                if (position == -1) return CheckResult(false, "Player 1 prompt to play is expected.")
            }
            outputString = main.execute("h4h5").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "john's turn:")
            if (position == -1) return CheckResult(false, "Incorrect output after an invalid command.")

            outputString = main.execute("exit").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "bye")
            if ( position  == -1 ) return CheckResult(false, "Exit message is expected.")

            return CheckResult.correct()
        }


        @DynamicTest
        fun testAdd1(): CheckResult {
            val pawnsWhite = MutableList<Pair<Int, Int>>(8) {index -> Pair(1,index) }
            val pawnsBlack = MutableList<Pair<Int, Int>>(8) {index -> Pair(6,index) }

            val main = TestedProgram()
            var outputString = main.start().trim()

            var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
            if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
            position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")

            outputString = main.execute("John").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")

            outputString = main.execute("Amelia").trim()
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("e2e2").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

            outputString = main.execute("d2d1").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

            outputString = main.execute("c2c5").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

            outputString = main.execute("a2a6").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

            outputString = main.execute("g2g7").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

            outputString = main.execute("a2a8").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

            outputString = main.execute("b3b3").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "no white pawn at b3", "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after trying to make a move from a square with no white pawn.")

            outputString = main.execute("c4c4").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "no white pawn at c4", "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after trying to make a move from a square with no white pawn.")

            outputString = main.execute("f2f1").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

            for (ch in 'a'..'g') {
                outputString = main.execute("${ch}2${ch+1}3").trim()
                position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "john's turn:")
                if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")
            }

            outputString = main.execute("h2g3").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

            outputString = main.execute("e2e3").trim()
            pawnsWhite.remove(Pair(1, 4))
            pawnsWhite.add(Pair(2, 4))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after 1 square move.")
            position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 prompt to play is expected.")

            for (ch in 'a'..'g') {
                outputString = main.execute("${ch}7${ch+1}6").trim()
                position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "amelia's turn:")
                if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")
            }

            outputString = main.execute("h7g6").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

            outputString = main.execute("e7e7").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

            outputString = main.execute("b7b8").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

            outputString = main.execute("e7e4").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

            outputString = main.execute("h7h3").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

            outputString = main.execute("g7g2").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

            outputString = main.execute("a7a1").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

            outputString = main.execute("a6a6").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "no black pawn at a6", "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after trying to make a move from a square with no black pawn.")

            outputString = main.execute("f5f5").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "no black pawn at f5", "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after trying to make a move from a square with no black pawn.")

            outputString = main.execute("d7d8").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

            outputString = main.execute("e7e6").trim()
            pawnsBlack.remove(Pair(6, 4))
            pawnsBlack.add(Pair(5, 4))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after 1 square move.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("e3e2").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

            outputString = main.execute("e3e1").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

            outputString = main.execute("e3e3").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

            outputString = main.execute("h2h3").trim()
            pawnsWhite.remove(Pair(1, 7))
            pawnsWhite.add(Pair(2, 7))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after 1 square move.")
            position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 prompt to play is expected.")

            outputString = main.execute("e6e6").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

            outputString = main.execute("e6e7").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

            outputString = main.execute("e6e8").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

            outputString = main.execute("h7h5").trim()
            pawnsBlack.remove(Pair(6, 7))
            pawnsBlack.add(Pair(4, 7))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after 1 square move.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("h3h4").trim()
            pawnsWhite.remove(Pair(2, 7))
            pawnsWhite.add(Pair(3, 7))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after 1 square move.")
            position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 prompt to play is expected.")

            outputString = main.execute("h5h4").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

            outputString = main.execute("exit").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "bye")
            if ( position  == -1 ) return CheckResult(false, "Exit message is expected.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun test1(): CheckResult {
            val pawnsWhite = MutableList<Pair<Int, Int>>(8) {index -> Pair(1,index) }
            val pawnsBlack = MutableList<Pair<Int, Int>>(8) {index -> Pair(6,index) }

            val main = TestedProgram()
            var outputString = main.start().trim()

            var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
            if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
            position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")

            outputString = main.execute("John").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")

            outputString = main.execute("Amelia").trim()
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("a2a3").trim()
            pawnsWhite.remove(Pair(1, 0))
            pawnsWhite.add(Pair(2, 0))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after 1 square move.")
            position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 prompt to play is expected.")

            outputString = main.execute("a7a6").trim()
            pawnsBlack.remove(Pair(6, 0))
            pawnsBlack.add(Pair(5, 0))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after 1 square move.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("e2e4").trim()
            pawnsWhite.remove(Pair(1, 4))
            pawnsWhite.add(Pair(3, 4))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
            position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 prompt to play is expected.")

            outputString = main.execute("e7e5").trim()
            pawnsBlack.remove(Pair(6, 4))
            pawnsBlack.add(Pair(4, 4))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("exit").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "bye")
            if ( position  == -1 ) return CheckResult(false, "Exit message is expected.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun test2(): CheckResult {
            val pawnsWhite = MutableList<Pair<Int, Int>>(8) {index -> Pair(1,index) }
            val pawnsBlack = MutableList<Pair<Int, Int>>(8) {index -> Pair(6,index) }
            val main = TestedProgram()
            var outputString = main.start().trim()

            var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
            if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
            position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")

            outputString = main.execute("John").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")

            outputString = main.execute("Amelia").trim()
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("e2d3").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

            outputString = main.execute("e2f3").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

            outputString = main.execute("e3e4").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "no white pawn at e3", "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after trying to make a move from a square with no white pawn.")

            outputString = main.execute("d7d8").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "no white pawn at d7", "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after trying to make a move from a square with no white pawn.")

            outputString = main.execute("e2e3").trim()
            pawnsWhite.remove(Pair(1, 4))
            pawnsWhite.add(Pair(2, 4))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after 1 square move.")
            position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 prompt to play is expected.")

            outputString = main.execute("b6b5").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "no black pawn at b6", "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after trying to make a move from a square with no black pawn.")

            outputString = main.execute("a2a1").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "no black pawn at a2", "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after trying to make a move from a square with no black pawn.")

            outputString = main.execute("e7e6").trim()
            pawnsBlack.remove(Pair(6, 4))
            pawnsBlack.add(Pair(5, 4))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after 1 square move.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("e3e5").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")

            outputString = main.execute("h2h3").trim()
            pawnsWhite.remove(Pair(1, 7))
            pawnsWhite.add(Pair(2, 7))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after 1 square move.")
            position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 prompt to play is expected.")

            outputString = main.execute("e6e4").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid command.")


            outputString = main.execute("exit").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "bye")
            if ( position  == -1 ) return CheckResult(false, "Exit message is expected.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun test3(): CheckResult {
            val pawnsWhite = MutableList<Pair<Int, Int>>(8) {index -> Pair(1,index) }
            val pawnsBlack = MutableList<Pair<Int, Int>>(8) {index -> Pair(6,index) }

            val main = TestedProgram()
            var outputString = main.start().trim()

            var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
            if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
            position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")

            outputString = main.execute("John").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")

            outputString = main.execute("Amelia").trim()
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("e2e4").trim()
            pawnsWhite.remove(Pair(1, 4))
            pawnsWhite.add(Pair(3, 4))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
            position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 prompt to play is expected.")

            outputString = main.execute("d7d5").trim()
            pawnsBlack.remove(Pair(6, 3))
            pawnsBlack.add(Pair(4, 3))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("e4d5").trim()
            pawnsBlack.remove(Pair(4, 3))
            pawnsWhite.remove(Pair(3, 4))
            pawnsWhite.add(Pair(4, 3))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after capture move.")
            position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 prompt to play is expected.")

            outputString = main.execute("c7c6").trim()
            pawnsBlack.remove(Pair(6, 2))
            pawnsBlack.add(Pair(5, 2))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after 1 square move.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("a2a4").trim()
            pawnsWhite.remove(Pair(1, 0))
            pawnsWhite.add(Pair(3, 0))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
            position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 prompt to play is expected.")

            outputString = main.execute("c6d5").trim()
            pawnsWhite.remove(Pair(4, 3))
            pawnsBlack.remove(Pair(5, 2))
            pawnsBlack.add(Pair(4, 3))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after capture movev.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("exit").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "bye")
            if ( position  == -1 ) return CheckResult(false, "Exit message is expected.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun test4(): CheckResult {
            val pawnsWhite = MutableList<Pair<Int, Int>>(8) {index -> Pair(1,index) }
            val pawnsBlack = MutableList<Pair<Int, Int>>(8) {index -> Pair(6,index) }

            val main = TestedProgram()
            var outputString = main.start().trim()

            var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
            if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
            position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")

            outputString = main.execute("John").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")

            outputString = main.execute("Amelia").trim()
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("e2e4").trim()
            pawnsWhite.remove(Pair(1, 4))
            pawnsWhite.add(Pair(3, 4))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
            position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 prompt to play is expected.")

            outputString = main.execute("a7a6").trim()
            pawnsBlack.remove(Pair(6, 0))
            pawnsBlack.add(Pair(5, 0))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after 1 square move.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("e4e5").trim()
            pawnsWhite.remove(Pair(3, 4))
            pawnsWhite.add(Pair(4, 4))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after 1 square move.")
            position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 prompt to play is expected.")

            outputString = main.execute("d7d5").trim()
            pawnsBlack.remove(Pair(6, 3))
            pawnsBlack.add(Pair(4, 3))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("e5d6").trim()
            pawnsBlack.remove(Pair(4, 3))
            pawnsWhite.remove(Pair(4, 4))
            pawnsWhite.add(Pair(5, 3))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after en passant capture.")
            position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 prompt to play is expected.")

            outputString = main.execute("exit").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "bye")
            if ( position  == -1 ) return CheckResult(false, "Exit message is expected.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun test5(): CheckResult {
            val pawnsWhite = MutableList<Pair<Int, Int>>(8) {index -> Pair(1,index) }
            val pawnsBlack = MutableList<Pair<Int, Int>>(8) {index -> Pair(6,index) }

            val main = TestedProgram()
            var outputString = main.start().trim()

            var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
            if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
            position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")

            outputString = main.execute("John").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")

            outputString = main.execute("Amelia").trim()
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("e2e4").trim()
            pawnsWhite.remove(Pair(1, 4))
            pawnsWhite.add(Pair(3, 4))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
            position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 prompt to play is expected.")

            outputString = main.execute("a7a6").trim()
            pawnsBlack.remove(Pair(6, 0))
            pawnsBlack.add(Pair(5, 0))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after 1 square move.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("e4e5").trim()
            pawnsWhite.remove(Pair(3, 4))
            pawnsWhite.add(Pair(4, 4))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after 1 square move.")
            position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 prompt to play is expected.")

            outputString = main.execute("d7d5").trim()
            pawnsBlack.remove(Pair(6, 3))
            pawnsBlack.add(Pair(4, 3))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("h2h3").trim()
            pawnsWhite.remove(Pair(1, 7))
            pawnsWhite.add(Pair(2, 7))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after 1 square move.")
            position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 prompt to play is expected.")

            outputString = main.execute("h7h6").trim()
            pawnsBlack.remove(Pair(6, 7))
            pawnsBlack.add(Pair(5, 7))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after 1 square move.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("e5d6").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "invalid input", "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Incorrect output after an invalid en passant capture.")

            outputString = main.execute("exit").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "bye")
            if ( position  == -1 ) return CheckResult(false, "Exit message is expected.")

            return CheckResult.correct()
        }

    }

    fun checkChessboard(outputString: String, searchPos: Int, pawnsWhite: List<Pair<Int, Int>>, pawnsBlack: List<Pair<Int, Int>>): Int {
        fun createChessboardStringList(pawnsWhite: List<Pair<Int, Int>>, pawnsBlack: List<Pair<Int, Int>>): List<String> {
            var chessboard = "  +---+---+---+---+---+---+---+---+\n"
            for (i in 7 downTo 0) {
                chessboard += "${i + 1} |"
                for (j in 0..7) {
                    val square = when {
                        pawnsWhite.contains(Pair(i, j)) -> 'W'
                        pawnsBlack.contains(Pair(i, j)) -> 'B'
                        else -> ' '
                    }
                    chessboard += " $square |"
                }
                chessboard += "\n  +---+---+---+---+---+---+---+---+\n"
            }
            chessboard += "    a   b   c   d   e   f   g   h\n"
            return chessboard.trim().split("\n").map { it.trim() }
        }
        val chessboardStringList = createChessboardStringList(pawnsWhite, pawnsBlack)
        return checkOutput(outputString, searchPos, * chessboardStringList.toTypedArray())
    }

    fun checkOutput(outputString: String, searchPos: Int, vararg checkStr: String): Int {
        var searchPosition = searchPos
        for (str in checkStr) {
            val findPosition = outputString.indexOf(str, searchPosition)
            if (findPosition == -1) return -1
            if ( outputString.substring(searchPosition until findPosition).isNotBlank() ) return -1
            searchPosition = findPosition + str.length
        }
        return searchPosition
    }


  learner_created: false
feedback_link: https://hyperskill.org/learn/step/13177#comment
status: Solved
record: 3
